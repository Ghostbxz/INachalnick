using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Linq;
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Converters;
using INachalnickTinyRestApi.Middlewares;

namespace INachalnick
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }
        public IConfiguration Configuration { get; }
        public bool EnabledCors { get; set; } = Environment.GetEnvironmentVariable("DISABLE_CORS") != "true";

        public void ConfigureServices(IServiceCollection services)
        {
            var controllersTypes = new List<Type>();
            AppDomain.CurrentDomain.GetAssemblies().ToList().ForEach(x => controllersTypes.AddRange(x.DefinedTypes));
            controllersTypes = controllersTypes.Where(x => x.FullName?.Contains("Controller") ?? false && x.IsAssignableFrom(typeof(ControllerBase))).ToList();
            var builder = services.AddControllers();
            foreach (var controller in controllersTypes)
            {
                builder.AddApplicationPart(controller.Assembly);
            }
            builder.AddControllersAsServices().AddNewtonsoftJson(opt =>
            {
                opt.SerializerSettings.TypeNameHandling = TypeNameHandling.Auto;
                opt.SerializerSettings.StringEscapeHandling = StringEscapeHandling.EscapeNonAscii;
                opt.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
                opt.SerializerSettings.Converters.Add(new StringEnumConverter());
                opt.SerializerSettings.SerializationBinder = new NamespaceMappingSerializationBinder { };
            });
            if (EnabledCors) { services.AddCors(); }
            services.AddScoped<AuthenticationFilter>();
            services.AddAutoGeneratedSwagger();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (!env.IsDevelopment()) { app.UseHsts(); }
            if (EnabledCors)
            {
                app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
            }
            app.UseMiddleware<NotFoundMiddleware>();
            app.UseMiddleware<ExceptionHandlerMiddleware>();
            app.UseMiddleware<ReqResMiddleware>();
            app.UseStaticFiles();
            app.UseAutoGeneratedSwagger();
            app.UseRouting();
            app.UseAuthorization();
            app.UseEndpoints(endpoints => endpoints.MapControllers());
        }
    }
}